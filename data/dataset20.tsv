description	focal_method	test_case
"/** * This function calculates the sum of two integers and returns the result. * @param a the first integer * @param b the second integer * @return the sum of the input integers */"	"public int sum(int a, int b) { return a + b; }"	"@Test public void testSumPositiveNumbers() { assertEquals(5, sum(2, 3)); }"
"/** * This function calculates the sum of two integers and returns the result. * @param a the first integer * @param b the second integer * @return the sum of the input integers */"	"public int sum(int a, int b) { return a + b; }"	"@Test public void testSumNegativeNumbers() { assertEquals(-5, sum(-2, -3)); }"
"/** * This function calculates the sum of two integers and returns the result. * @param a the first integer * @param b the second integer * @return the sum of the input integers */"	"public int sum(int a, int b) { return a + b; }"	"@Test public void testSumZero() { assertEquals(0, sum(0, 0)); }"
"/** * This function calculates the difference between two integers. * @param a the first integer * @param b the second integer * @return the difference between the input integers */"	"public int subtract(int a, int b) { return a - b; }"	"@Test public void testSubtractPositiveNumbers() { assertEquals(1, subtract(3, 2)); }"
"/** * This function calculates the difference between two integers. * @param a the first integer * @param b the second integer * @return the difference between the input integers */"	"public int subtract(int a, int b) { return a - b; }"	"@Test public void testSubtractNegativeNumbers() { assertEquals(-1, subtract(-3, -2)); }"
"/** * This function calculates the difference between two integers. * @param a the first integer * @param b the second integer * @return the difference between the input integers */"	"public int subtract(int a, int b) { return a - b; }"	"@Test public void testSubtractZero() { assertEquals(2, subtract(2, 0)); }"
"/** * This function multiplies two integers. * @param a the first integer * @param b the second integer * @return the product of the input integers */"	"public int multiply(int a, int b) { return a * b; }"	"@Test public void testMultiplyPositiveNumbers() { assertEquals(6, multiply(2, 3)); }"
"/** * This function multiplies two integers. * @param a the first integer * @param b the second integer * @return the product of the input integers */"	"public int multiply(int a, int b) { return a * b; }"	"@Test public void testMultiplyByZero() { assertEquals(0, multiply(2, 0)); }"
"/** * This function multiplies two integers. * @param a the first integer * @param b the second integer * @return the product of the input integers */"	"public int multiply(int a, int b) { return a * b; }"	"@Test public void testMultiplyNegativeNumbers() { assertEquals(6, multiply(-2, -3)); }"
"/** * This function divides two integers. * @param a the numerator * @param b the denominator * @return the result of the division * @throws ArithmeticException if division by zero occurs */"	"public int divide(int a, int b) { if (b == 0) throw new ArithmeticException("Cannot divide by zero"); return a / b; }"	"@Test public void testDividePositiveNumbers() { assertEquals(2, divide(6, 3)); }"
"/** * This function divides two integers. * @param a the numerator * @param b the denominator * @return the result of the division * @throws ArithmeticException if division by zero occurs */"	"public int divide(int a, int b) { if (b == 0) throw new ArithmeticException("Cannot divide by zero"); return a / b; }"	"@Test(expected = ArithmeticException.class) public void testDivideByZero() { divide(5, 0); }"
"/** * This function divides two integers. * @param a the numerator * @param b the denominator * @return the result of the division * @throws ArithmeticException if division by zero occurs */"	"public int divide(int a, int b) { if (b == 0) throw new ArithmeticException("Cannot divide by zero"); return a / b; }"	"@Test public void testDivideNegativeNumbers() { assertEquals(2, divide(-6, -3)); }"
"/** * This function calculates the modulus of two integers. * @param a the first integer * @param b the second integer * @return the remainder when a is divided by b * @throws ArithmeticException if b is zero */"	"public int modulus(int a, int b) { if (b == 0) throw new ArithmeticException("Cannot divide by zero"); return a % b; }"	"@Test public void testModulusPositiveNumbers() { assertEquals(1, modulus(7, 3)); } @Test public void testModulusNegativeNumbers() { assertEquals(-1, modulus(-7, 3)); } @Test(expected = ArithmeticException.class) public void testModulusByZero() { modulus(7, 0); }"
"/** * This function calculates the square of an integer. * @param a the integer to square * @return the square of the input integer */"	"public int square(int a) { return a * a; }"	"@Test public void testSquarePositiveNumber() { assertEquals(9, square(3)); } @Test public void testSquareZero() { assertEquals(0, square(0)); } @Test public void testSquareNegativeNumber() { assertEquals(4, square(-2)); }"
"/** * This function calculates the square root of a positive integer. * @param a the integer to find the square root of * @return the square root of the input integer * @throws IllegalArgumentException if a is negative */"	"public double sqrt(int a) { if (a < 0) throw new IllegalArgumentException("Cannot take square root of negative number"); return Math.sqrt(a); }"	"@Test public void testSqrtPositiveNumber() { assertEquals(3.0, sqrt(9), 0.001); } @Test public void testSqrtZero() { assertEquals(0.0, sqrt(0), 0.001); } @Test(expected = IllegalArgumentException.class) public void testSqrtNegativeNumber() { sqrt(-1); }"
"/** * This function calculates the power of an integer raised to another integer. * @param base the base number * @param exponent the exponent to raise the base * @return the result of base raised to the power of exponent */"	"public int power(int base, int exponent) { return (int) Math.pow(base, exponent); }"	"@Test public void testPowerPositiveBasePositiveExponent() { assertEquals(8, power(2, 3)); } @Test public void testPowerNegativeBasePositiveExponent() { assertEquals(-8, power(-2, 3)); } @Test public void testPowerAnyBaseZeroExponent() { assertEquals(1, power(5, 0)); }"
"/** * This function calculates the absolute value of an integer. * @param a the integer * @return the absolute value of the input integer */"	"public int absolute(int a) { return Math.abs(a); }"	"@Test public void testAbsolutePositiveNumber() { assertEquals(5, absolute(5)); } @Test public void testAbsoluteNegativeNumber() { assertEquals(5, absolute(-5)); } @Test public void testAbsoluteZero() { assertEquals(0, absolute(0)); }"
"/** * This function checks if an integer is even. * @param a the integer to check * @return true if the input integer is even, false otherwise */"	"public boolean isEven(int a) { return a % 2 == 0; }"	"@Test public void testIsEvenEvenNumber() { assertTrue(isEven(4)); } @Test public void testIsEvenOddNumber() { assertFalse(isEven(3)); } @Test public void testIsEvenZero() { assertTrue(isEven(0)); }"
"/** * This function checks if an integer is odd. * @param a the integer to check * @return true if the input integer is odd, false otherwise */"	"public boolean isOdd(int a) { return a % 2 != 0; }"	"@Test public void testIsOddNumber() { assertTrue(isOdd(3)); } @Test public void testIsOddEvenNumber() { assertFalse(isOdd(4)); } @Test public void testIsOddNegativeOddNumber() { assertTrue(isOdd(-3)); }"
"/** * This function finds the maximum of two integers. * @param a the first integer * @param b the second integer * @return the maximum of the two integers */"	"public int max(int a, int b) { return Math.max(a, b); }"	"@Test public void testMaxPositiveNumbers() { assertEquals(5, max(5, 3)); } @Test public void testMaxNegativeNumbers() { assertEquals(-3, max(-5, -3)); } @Test public void testMaxEqualNumbers() { assertEquals(4, max(4, 4)); }"
"/** * This function finds the minimum of two integers. * @param a the first integer * @param b the second integer * @return the minimum of the two integers */"	"public int min(int a, int b) { return Math.min(a, b); }"	"@Test public void testMinPositiveNumbers() { assertEquals(3, min(5, 3)); } @Test public void testMinNegativeNumbers() { assertEquals(-5, min(-5, -3)); } @Test public void testMinEqualNumbers() { assertEquals(4, min(4, 4)); }"
"/** * This function calculates the factorial of a non-negative integer. * @param n the integer to calculate the factorial of * @return the factorial of n * @throws IllegalArgumentException if n is negative */"	"public int factorial(int n) { if (n < 0) throw new IllegalArgumentException("Cannot calculate factorial of negative number"); return (n <= 1) ? 1 : n * factorial(n - 1); }"	"@Test public void testFactorialPositiveNumber() { assertEquals(6, factorial(3)); } @Test public void testFactorialZero() { assertEquals(1, factorial(0)); } @Test(expected = IllegalArgumentException.class) public void testFactorialNegativeNumber() { factorial(-1); }"